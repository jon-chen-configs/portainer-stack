services:
  agent-not-synology:
    image: portainer/agent:alpine
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: ["node.hostname != ${NAS_HOSTNAME}"]
        # constraints: [node.platform.os == linux]
    environment:
      - AGENT_CLUSTER_ADDR=tasks.agent
      - LOG_LEVEL=DEBUG

  # Docker (20.10.3) on Synology bug where env vars don't 
  # set on container.
  agent:
    image: portainer/agent:alpine
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /volume4/@docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: ["node.hostname == ${NAS_HOSTNAME}"]

  portainer:
    image: portainer/portainer-ce:alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          # - node.role == manager
          - node.hostname == ${NAS_HOSTNAME}
      restart_policy:
        condition: on-failure
      labels:
        - com.centurylinklabs.watchtower.enable=true
        - traefik.enable=true
        - traefik.docker.network=traefik-net
        - traefik.http.routers.portainer.entrypoints=https
        - traefik.http.routers.portainer.rule=Host(`portainer.cynicsoft.net`)
        - traefik.http.routers.portainer.middlewares=internal-whitelist
        - traefik.http.services.portainer.loadbalancer.server.port=9000
        - homepage.name=Portainer
        - homepage.group=Network
        - homepage.icon=https://raw.githubusercontent.com/modem7/MiscAssets/master/Icons/Dashboard-Icons/portainer.png
        - homepage.href=https://kavita.cynicsoft.net/
        - homepage.description=Docker management
    # command: -H tcp://tasks.agent:9001 --tlsskipverify
    command: --tlsskipverify
    networks:
      - traefik-net
      - agent_network
      - default
    ports:
    #   - "9443:9443"
      - "9000:9000"
    #   - "8000:8000"
    volumes:
      - /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    environment:
      - TZ=${TZ}

  portainer-backup-db-job:
    image: docker-hub.cynicsoft.net/alpine-base:latest
    env_file: ["${ENV_DIR:-swarm-envs}/swarm/portainer-stack/backup-db-job.env"]
    deploy:
      mode: replicated
      replicas: 0
      placement:
        # Docker (20.10.3) on Synology bug where env vars from env_file 
        # not set on container.
        # constraints: [node.platform.arch != aarch64]
        constraints:
          - node.platform.arch != aarch64
          - node.hostname != ${NAS_HOSTNAME}
      restart_policy:
        condition: none
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=@daily
    networks:
      - healthchecks-swarm_default
      - default
    command: >-
      sh -c 'LOG=/logs/portainer-backup-db-job.log;
      set -o pipefail;
      date 2>&1 | tee $$LOG;
      wget -SO - http://tasks.healthchecks:8000/ping/da0556ba-739f-4f6e-afe0-2393c2537d58/start 2>&1 | tee -a $$LOG;
      echo "backing up db..." 2>&1 | tee -a $$LOG &&
      wget http://tasks.portainer:9000/api/backup --header "X-API-Key:$$PORTAINER_API_TOKEN" --post-data {} --content-disposition 2>&1 | tee -a $$LOG &&
      mv $$(find . -type f -name "portainer-backup_*" -print0 | xargs -0 ls -t | head -n 1) /backups/data/sqlite 2>&1 | tee -a $$LOG &&
      ls -dt /backups/data/sqlite/* | grep portainer-backup_ | tail -n +3 | xargs rm -f -- 2>&1 | tee -a $$LOG &&
      echo "done." 2>&1 | tee -a $$LOG;
      wget -SO - http://tasks.healthchecks:8000/ping/da0556ba-739f-4f6e-afe0-2393c2537d58/$$? 2>&1 | tee -a $$LOG'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-stack_logs:/logs
      - backups:/backups


volumes:
  portainer_data:
    driver_opts:
      type: nfs
      o: addr=${NAS_HOST},nolock,noresvport,vers=2
      device: :${DATADIR}/portainer-stack/portainer/data
  portainer-stack_logs:
    driver_opts:
      type: nfs
      o: addr=${NAS_HOST},nolock,noresvport,vers=2
      device: :${DATADIR}/portainer-stack/logs
  backups:
    driver_opts:
      type: nfs
      o: addr=${NAS_HOST},nolock,noresvport,vers=2
      device: :/volume4/docker/backups


networks:
  agent_network:
    driver: overlay
    attachable: true
  traefik-net:
    external: true
  healthchecks-swarm_default:
    external: true